[{"path":"https://capellett.github.io/acresFSA/articles/1_compile.html","id":"compilation-of-acreage-data-from-the-us-farm-service-agency","dir":"Articles","previous_headings":"","what":"Compilation of Acreage Data from the US Farm Service Agency","title":"Compilation Methods","text":"vignette documents compilation Farm Service Agency data R package. goal maintain data integrity, enhance comparability data time, reduce file size read speed. Additional data validation cleaning documented next vignette.","code":"library(tidyverse) library(readxl) source(\"../R/track_dataset.R\")"},{"path":"https://capellett.github.io/acresFSA/articles/1_compile.html","id":"the-early-years-2009-and-2010","dir":"Articles","previous_headings":"Compilation of Acreage Data from the US Farm Service Agency","what":"The early years, 2009 and 2010","title":"Compilation Methods","text":"Irrigation practice information included FSA data years. Also, fields labelled inconsistently. Columns “Irrigation Practice” “State County Code” created forward compatibility. tables, appears row intended use crop farm. columns planted acres, prevented acres, failed acres. tables pivoted row type (planted, prevented, failed) acreage intended use crop farm. , rows acreage values 0 removed.","code":""},{"path":"https://capellett.github.io/acresFSA/articles/1_compile.html","id":"a-transition-year-2011","dir":"Articles","previous_headings":"Compilation of Acreage Data from the US Farm Service Agency","what":"A Transition Year, 2011","title":"Compilation Methods","text":"FSA acreage data 2011 includes irrigation practice, formatted differently subsequent years. Now, addition acreage types Planted, Prevented, Failed, additional types Volunteer, Plant Fail, Planted. , types either irrigated , many types acreage. Also, columns total acreage values: Planted Total, Prevented Total, Failed Total, Volunteer Total, Planted Total, Plant Fail Total. values total columns equal sum irrigated nonirrigated acreage type. type columns pivoted rows, zero values removed. nonirrigated acreage values unnecessary (irrigated acreage total acreage provide information).","code":""},{"path":"https://capellett.github.io/acresFSA/articles/1_compile.html","id":"state-names-and-abbreviations","dir":"Articles","previous_headings":"Compilation of Acreage Data from the US Farm Service Agency","what":"State Names and Abbreviations","title":"Compilation Methods","text":"variation spelling capitalization State names abbreviations 2009-2010 data 2011 data. Fortunately, numeric codes states, codes used standardize State names abbreviations.","code":"#### Create State_table to help clean-up ## variable spellings of states or abbreviations State_table <-   full_join(     select(fsa11b, `State Code`, `State Name`) |> unique(),     select(fsa0, `State Code`, `State Abbrev`) |> unique()) |>   mutate(`State Name`=if_else(`State Abbrev`=='MP', 'MARIANA ISLANDS', `State Name`))  fsa1 <- bind_rows(fsa0, fsa11b) |>   select(-`State Name`, -`State Abbrev`) |>   left_join(State_table) |> track_dataset('fsa1') ## 542,694 obs. of 15 variables. 65,605,208 bytes  # all.equal(fsa1[,c('State Code', 'State Name', 'State Abbrev')] |> unique(), #           State_table) ## TRUE ## This checks out...  rm(fsa0, fsa11, fsa11b)"},{"path":"https://capellett.github.io/acresFSA/articles/1_compile.html","id":"present-consistent-files","dir":"Articles","previous_headings":"Compilation of Acreage Data from the US Farm Service Agency","what":"2012-present: consistent files","title":"Compilation Methods","text":"remaining files uniform. types acreage values, Planted Acres, Failed Acres, etc., listed separate columns raw tables, separated distinct rows. acreage values summed year, county, crop, crop type, intended use, irrigation practice, type. Prior operation, row represented specific (though unnamed) farm, now rows represent totals county. rows nonirrigated acreage removed, information implicit values irrigated total acreage.","code":"read_fsa <- function(x) {   x <- paste0('../data-raw/downloaded excel files/', x)   read_xlsx(x, sheet='county_data') |>     select(-`Planted and Failed Acres`) |>     filter(!is.na(County))}  fsa2 <- bind_rows(   `2012`=read_fsa('2012_fsa_acres_jan_2013.xlsx') |>     rename(`Failed Acres`='Failded Acres') |> track_dataset('2012'),   `2013`=read_fsa('2013_fsa_acres_jan_2014.xlsx') |> track_dataset('2013'),   `2014`=read_fsa('2014_fsa_acres_jan2014.xlsx') |> track_dataset('2014'),   `2015`=read_fsa('2015_fsa_acres_01052016.xlsx') |> track_dataset('2015'),   `2016`=read_fsa('2016_fsa_acres_010417.xlsx') |> track_dataset('2016'),   `2017`=read_fsa('2017_fsa_acres_010418.xlsx') |> track_dataset('2017'),   `2018`=read_fsa('2018_fsa_acres_012819.xlsx') |> track_dataset('2018'),   `2019`=read_fsa('2019_fsa_acres_web_010220.xlsx') |> track_dataset('2019'),   `2020`=read_fsa('2020_fsa_acres_web_010521.xlsx') |> track_dataset('2020'),   `2021`=read_fsa('2021_fsa_acres_web_010322.xlsx') |>      track_dataset('2021') |>     slice(-1) |>     mutate(`Planted Acres` = as.numeric(`Planted Acres`),            `Volunteer Acres` = as.numeric(`Volunteer Acres`),            `Failed Acres` = as.numeric(`Failed Acres`),            `Prevented Acres` = as.numeric(`Prevented Acres`),            `Not Planted Acres` = as.numeric(`Not Planted Acres`)),   `2022`=read_fsa('2022_fsa_acres_web_010323.xlsx') |> track_dataset('2022') |>     dplyr::mutate(`State County Code` = as.character(`State County Code`)),   `2023`=read_fsa('2023_fsa_acres_web_010224.xlsx') |> track_dataset('2023') |>     dplyr::mutate(`State County Code` = as.character(`State County Code`)),   .id='Year')  |>    track_dataset('fsa2012-2023')  ## 1,790,332 obs of 16 variables. 158,999,384 bytes ## calculate Total acres, make tidy fsa2b <- fsa2 |>   gather('Type', 'Acres', `Planted Acres`:`Not Planted Acres`) |> ## 6,189,540 obs. of 13 variables. 644,259,288 bytes   track_dataset('fsa2 gather acreage types') |>   group_by(`State Code`, County, `County Code`, `State County Code`, Year,                   `Crop`, `Crop Type`, `Crop Code`, `Intended Use`, `Irrigation Practice`, `Type`) |>   summarise(Acres=sum(Acres, na.rm=TRUE)) |>   ungroup() |>   track_dataset('fsa2 sum acres by county, crop, use, irrigation, and type') |>   spread(`Irrigation Practice`, Acres) |>   mutate(Type = gsub(\"\\\\s*\\\\w*$\", \"\", Type),          I= if_else(is.na(I), 0, I),          N= if_else(is.na(N), 0, N),          O= if_else(is.na(O), 0, O)) |>   mutate(`T`=I+N+O) |> select(-N) |>   track_dataset('fsa2 spread irrigation practice, calculate total, remove unirrigated') |>   gather(`Irrigation Practice`, 'Acres', `I`:`T`) |>   track_dataset('fsa2 gather irrigation practice') |>   filter(Acres != 0 & !is.na(Acres)) |> ## 1522162   track_dataset(\"fsa2 remove 0's and missing data\") |>   rename(`County Name`=County, `Crop Type Name`='Crop Type', `Crop Name`=Crop)  State_table[55,] <- list(\"60\",\"AMERICAN SAMOA\", \"AS\") fsa2b <- inner_join(fsa2b, State_table) |> track_dataset('fsa2 state join') fsa <- bind_rows(fsa1, fsa2b) |> track_dataset('fsa') saveRDS(fsa, '../data-raw/acresFSA_compilation.rds') rm(fsa1, fsa2, fsa2b) write.csv(data_manipulation_log, '../data-raw/data_compilation_log.csv')  ### TODO: Read in farm counts # read_farm_count <- function(x) {read_xlsx(x, sheet='farm_count')}"},{"path":"https://capellett.github.io/acresFSA/articles/2_clean.html","id":"data-cleaning-and-validation","dir":"Articles","previous_headings":"","what":"Data Cleaning and Validation","title":"Data Cleaning Methods","text":"","code":"knitr::opts_chunk$set(message=FALSE, warning=FALSE, eval=FALSE) library(tidyverse) library(magrittr) library(readxl) fsa <- readRDS('../data-raw/acresFSA_compilation.rds') fsa <- mutate(fsa, `County Name` = toupper(`County Name`)) ### TODO: use these libraries. ### install.packages('validate', 'errorlocate); library(validate); library(errorlocate)  ## Convert any values of 'NULL', 'null', 'NA', or 'na' to NA_character_  ## Test that all State Codes are 2 characters, and all County Codes are 3 characters. unique(nchar(fsa$`State Code`))==2 unique(nchar(fsa$`County Code`)) == 3"},{"path":"https://capellett.github.io/acresFSA/articles/2_clean.html","id":"test-year-values","dir":"Articles","previous_headings":"Data Cleaning and Validation","what":"Test year values","title":"Data Cleaning Methods","text":"Look right, afterall, created values previous script.","code":"unique(fsa$Year) %>% sort()"},{"path":"https://capellett.github.io/acresFSA/articles/2_clean.html","id":"test-state-code-state-name-and-state-abbreviation-values","dir":"Articles","previous_headings":"Data Cleaning and Validation","what":"Test State Code, State Name, and State Abbreviation values","title":"Data Cleaning Methods","text":"USA state codes skip numbers (eg, 03).","code":"fsa %>%   dplyr::select(`State Code`, `State Name`, `State Abbrev`) %>%   unique() %>%   dplyr::arrange(1)"},{"path":"https://capellett.github.io/acresFSA/articles/2_clean.html","id":"test-that-the-state-county-code-is-truly-the-concatenation-of-state-and-county-codes-","dir":"Articles","previous_headings":"Data Cleaning and Validation","what":"Test that the State County Code is truly the concatenation of state and county codes.","title":"Data Cleaning Methods","text":"Since appears correct, columns State Code State Abbreviation redundant removed.","code":"test1 <- filter(fsa, `State County Code` != paste0(`State Code`, `County Code`)) %>%   dplyr::select(Year, `State Code`, `County Code`, `State County Code`, `State Name`, `County Name`) %>%   unique()   test1 %>%   dplyr::arrange(Year, `State Name`, `County Name`)  unique(test1$`State Code`)  unique(nchar(test1$`State County Code`))  ## for some years, the leading zeros in State County Code got dropped. fsa <- fsa |>   dplyr::mutate(`State County Code` = paste0(`State Code`, `County Code`)) |>   dplyr::select(-`State Code`, -`State Abbrev`) %>%   dplyr::rename(State = 'State Name')"},{"path":"https://capellett.github.io/acresFSA/articles/2_clean.html","id":"test-the-county-names-are-uniform","dir":"Articles","previous_headings":"Data Cleaning and Validation","what":"Test the County Names are uniform","title":"Data Cleaning Methods","text":"instances counties changes county name different years. removing stray punctuation marks, county names made uniform replacing variations version county name characters (letters, spaces, punctation). operation performed, State County Code County Code columns longer relevant, dropped.","code":"duped <- function(x) { duplicated(x) | duplicated(x, fromLast=TRUE) }  ### Return cases where 1:1 fails one_to_one_fails <- function(df, id1, id2) {   unique(df[,c(id1, id2)]) %>%     .[duped(.[,id1]) | duped(.[,id2]),] } ## Test that State+County is 1:1 with 'State County Code' # one_to_one_fails(fsa, c('State', 'County Name'), 'State County Code') %>% nrow() #### Should be nrow 0, is nrow 835... #### Caused by variation in county names  # length(unique(fsa$`State County Code`)) # filter(fsa, Year==2016)$`State County Code` %>% #   unique() %>% length() #### Apparently, not all state county codes are in every year...  county_name_recode <-   select(fsa, 'State County Code', 'County Name') %>%   unique() %>%   group_by(`State County Code`) %>%   do({     county_names <- .$`County Name` %>%       str_replace_all(\"\\\\.\", '') %>%       str_replace_all('&#39;', '')     county_names <- gsub(\",.*\",\"\",county_names) %>%       unique()     tibble(County= county_names[which.max(nchar(county_names))])   }) %>% ungroup() %>%   dplyr::filter(!is.na(`State County Code`))  fsa <- select(fsa, -`County Name`) %>% inner_join(county_name_recode)  ## Test again that 'State'+'County' is 1:1 with 'State County Code' # one_to_one_fails(fsa, c('State', 'County'), 'State County Code') %>% nrow() == 0 #### Then drop State County Code fsa <- select(fsa, -`State County Code`) fsa <- dplyr::select(fsa, -'County Code')"},{"path":"https://capellett.github.io/acresFSA/articles/2_clean.html","id":"test-that-crop-values-are-uniform","dir":"Articles","previous_headings":"Data Cleaning and Validation","what":"Test that Crop values are uniform","title":"Data Cleaning Methods","text":"cases multiple crop names associated single crop code. cases reviewed varying crop names replaced whichever one among appears appropriate. , Crop Code column dropped longer needed.","code":"#### Just like for the State_table and county_name_recode, ###  create an authoritative reference table for Crops & crop types ### that will allow dropping code columns.  ## Test that Crop Name is 1:1 with Crop Code # one_to_one_fails(fsa, 'Crop Name', 'Crop Code') %>% View() ### Should be 0, is 49.  recode_column_with_table <- function(df, col_index, recode_table) {   df2 <- df   names(df2)[col_index] <- 'from'   print(paste0('recoding ', names(df)[col_index]))   df[col_index] <- left_join(df2, recode_table, by='from') %>%     mutate(to=if_else(is.na(to), from, to)) %>% .$to   invisible(df) }  ### Recode crop names. table(fsa[c('Crop Name', 'Year')]) %>% write.csv('Crop Names per Year.csv') one_to_one_fails(fsa, 'Crop Name', 'Crop Code') %>% write.csv('Crop codes with multiple names.csv')   # crop_name_recode <- read_xlsx(\"data-raw\\\\FSA - Clean up the names.xlsx\", sheet = 'crop name recode') # fsa <- recode_column_with_table(fsa, 3, crop_name_recode)  crop_name_recode <- read_xlsx(\"FSA - Clean up the names.xlsx\", sheet = 'crop name recode (2)') %>%   dplyr::mutate(`Crop Code` = stringr::str_pad(     as.character(`Crop Code`), width=4, side=\"left\", pad=\"0\"))  fsa <- dplyr::bind_rows(   dplyr::anti_join(fsa, crop_name_recode, by=\"Crop Code\"),   dplyr::semi_join(fsa, crop_name_recode, by=\"Crop Code\") %>%     dplyr::select(-`Crop Name`) %>%     dplyr::left_join(crop_name_recode, by=\"Crop Code\"))  # one_to_one_fails(fsa, 'Crop Name', 'Crop Code') %>% nrow() == 0 ## TRUE  fsa <- dplyr::select(fsa, -`Crop Code`)"},{"path":"https://capellett.github.io/acresFSA/articles/2_clean.html","id":"test-the-crop-type-values-are-uniform","dir":"Articles","previous_headings":"Data Cleaning and Validation","what":"Test the Crop Type values are uniform","title":"Data Cleaning Methods","text":"Crop Type column contains 3 letter abbreviations values Crop Type Name column. Crop Type abbreviations can repeated different crops. example Crop Type “CAN” might refer Canary Grass, Carnelian Grapes, Canna Lily Flowers, several crops. seems reasonable, cases single Crop Type abbreviation value used refer multiple Crop Type Name values Crop. cases, Crop Type Name characters selected, probably descriptive. point, Crop Type abbreviation redundant, column dropped. ” “Crop Type Name” column renamed “Variety”.","code":"# filter(fsa, !is.na(`Crop Type`)) %>% #   one_to_one_fails('Crop Type Name', 'Crop Type') %>% View() ## 420 rows.  ## Test that Crop Name + Crop Type Name is 1:many with Crop Type # fsa[,c('Crop Name', 'Crop Type Name', 'Crop Type')] %>% #   filter(!is.na(`Crop Type`)) %>% unique() %>% #   .[duped(.[,c('Crop Name', 'Crop Type Name')]),] ## Should be nrow 0. is nrow 0.  # fsa %>%  #   dplyr::select(`Crop Name`, `Crop Type Name`, `Crop Type`) %>%  #   unique() %>% #   scutils::dupes(idCols=\"Crop Type\") %>% View()  crop_type_name_recode <- fsa %>%    dplyr::select(`Crop Name`, `Crop Type Name`, `Crop Type`) %>%    unique() %>%   dplyr::filter(!is.na(`Crop Type`)) %>%   scutils::dupes(., idCols=c(\"Crop Name\", \"Crop Type\")) %>%    dplyr::group_by(`Crop Name`, `Crop Type`) %>%   dplyr::summarise(`Crop Type Name` = `Crop Type Name`[which.max(nchar(`Crop Type Name`))]) %>%   dplyr::ungroup()  fsa <- dplyr::bind_rows(   dplyr::anti_join(fsa, crop_type_name_recode, by=c('Crop Name', 'Crop Type')),   dplyr::semi_join(fsa, crop_type_name_recode, by=c('Crop Name', 'Crop Type')) %>%     dplyr::select(-`Crop Type Name`) %>%     dplyr::left_join(crop_type_name_recode, by=c('Crop Name', 'Crop Type')) )  ## test that it worked # fsa %>%  #   dplyr::select(`Crop Name`, `Crop Type Name`, `Crop Type`) %>%  #   unique() %>% #   dplyr::filter(!is.na(`Crop Type`)) %>% #   scutils::dupes(., idCols=c(\"Crop Name\", \"Crop Type\")) ## should be nrow() == 0, and it is.  ### Old Code # ### Recode Crop Type Names # table(fsa_[c('Crop Type Name', 'Year')]) %>% write.csv('data-raw\\\\Crop Type Names per Year.csv') # crop_type_name_recode <- read_xlsx(\"data-raw\\\\FSA - Clean up the names.xlsx\", #                                    sheet='crop type name recode') # fsa <- recode_column_with_table(fsa, 4, crop_type_name_recode)  fsa <- dplyr::select(fsa, -`Crop Type`) %>%   dplyr::rename(Crop='Crop Name', Variety='Crop Type Name')  source(\"../R/track_dataset.R\")  track_dataset(fsa, 'Tested and removed redundant columns') ## This chunk of code is outdated and no longer needed.   ### Recode crop names and crop type names together ... ### Make a table with unique crop code, crop name, crop type name, and crop type - by year crop_classification_review <- fsa %>%   mutate(`Crop Type Name` = if_else(     `Crop Type Name`=='NULL', NA_character_, `Crop Type Name`)) %>%   group_by(Year, `Crop Code`, `Crop Name`, `Crop Type Name`) %>%   summarise(Acres=sum(Acres, na.rm=T)) %>%   ungroup() %>%   spread('Year', 'Acres')  write.csv(crop_classification_review, 'data-raw\\\\Crop Classification Review.csv') crop_name_and_type_recode <- read_xlsx(\"data-raw\\\\FSA - Clean up the names.xlsx\",                                        sheet='crop name and type recode',                                        col_types='text') %>%   mutate(`Crop Code`=str_pad(`Crop Code`, 4, 'left', '0'))  #### Recode Crop Names (again) crop_name_recode2 <- select(crop_name_and_type_recode,                             `Crop Code`, `Crop Name 2`) %>%   unique() %>%   filter(!is.na(`Crop Name 2`))  fsa <- left_join(fsa, crop_name_recode2) %>%   mutate(`Crop Name`=if_else(is.na(`Crop Name 2`), `Crop Name`, `Crop Name 2`)) %>%   select(-`Crop Name 2`) one_to_one_fails(fsa, 'Crop Name', 'Crop Code') ## from 22 to 16 rows. ## actually, many are doubled because I combined tobacco and cotton crop types.  ## Call \"turn area\"s \"idle\" with type \"turn area\". filter(fsa, `Crop Code`=='0105') %>%   select(`Crop Name`, `Crop Type Name`) %>%   unique() fsa <- mutate(fsa, `Crop Type Name`=if_else(`Crop Name`=='TURN AREAS',                                             'TURN AREAS', `Crop Type Name`)) fsa <- mutate(fsa, `Crop Name`=if_else(`Crop Code`=='0105',                                        'IDLE', `Crop Name`)) #### Recode Crop Type Names (again) crop_type_name_recode2 <- select(crop_name_and_type_recode, -`Crop Name`, -`Crop Name 2`) %>%   unique() %>%   filter(!is.na(`Crop Type Name 2`))  fsa <- left_join(fsa, crop_type_name_recode2) %>%   mutate(`Crop Type Name`=if_else(is.na(`Crop Type Name 2`),                                   `Crop Type Name`, `Crop Type Name 2`)) %>%   select(-`Crop Type Name 2`)  # is.missing <- function(x) {is.null(x) | is.na(x)} #### If Crop Type Name is missing, so is Crop Type. So What good is Crop Type? # filter(fsa_, is.na(`Crop Type Name`) & !is.na(`Crop Type`)) # filter(fsa_, is.null(`Crop Type Name`) & !is.null(`Crop Type`)) # filter(fsa_, is.missing(`Crop Type Name`) & !is.missing(`Crop Type`)) # unique(fsa_[c('Crop Name', 'Crop Type Name', 'Crop Type')]) %>% #   filter(!is.na(`Crop Type`) & `Crop Type` != 'NULL') %>% #   write.csv('Crop Type Review.csv')  fsa <- select(fsa, -`Crop Type`, -`Crop Code`) %>%   rename(Crop='Crop Name', Variety='Crop Type Name')"},{"path":"https://capellett.github.io/acresFSA/articles/2_clean.html","id":"code-missing-values-as-na","dir":"Articles","previous_headings":"Data Cleaning and Validation","what":"Code Missing Values as NA","title":"Data Cleaning Methods","text":"Variety column contains values “NULL”, “null”, “NA”, “na”. values converted missing values.","code":"# fsa2 <- group_by(fsa, Year, State, County, Crop, Variety, `Irrigation Practice`, #                 `Intended Use`, Type) %>% #   summarise(Acres=sum(Acres, na.rm=TRUE)) %>% #   ungroup()   # filter(fsa, Variety %in% c('NULL', 'null', 'NA', 'na', '', ' ')) ## 75,205 rows. convert_NAs <- function(x) {   if_else(x %in% c('NULL', 'null', 'NA', 'na', '', ' '),           NA_character_, x) }  fsa <- mutate(fsa, Variety = convert_NAs(Variety))  # filter(fsa, Crop %in% c('NULL', 'null', 'NA', 'na', '', ' ')) ## 0 rows # filter(fsa, is.na(Crop)) ## 0 rows #  # filter(fsa, `Irrigation Practice` %in% c('NULL', 'null', 'NA', 'na', '', ' ')) ## 0 rows # filter(fsa, is.na(`Irrigation Practice`)) ## 0 rows #  # filter(fsa, `Intended Use` %in% c('NULL', 'null', 'NA', 'na', '', ' ')) ## 0 rows # filter(fsa, is.na(`Intended Use`)) ## 313,237 rows #  # filter(fsa, Type %in% c('NULL', 'null', 'NA', 'na', '', ' ')) ## 0 rows # filter(fsa, is.na(Type)) ## 0 rows #  # filter(fsa, is.na(Acres)) ## 0 rows  rm(county_name_recode, # crop_classification_review, crop_name_and_type_recode,    crop_name_recode, crop_type_name_recode)"},{"path":"https://capellett.github.io/acresFSA/articles/2_clean.html","id":"review-intended-use-values","dir":"Articles","previous_headings":"Data Cleaning and Validation","what":"Review Intended Use Values","title":"Data Cleaning Methods","text":"“Intended Use” 2009 2012 included Conservation Practices. 2009 - 2011 conservation practices designated number, 2012 listed form “CP## Description”. 2013-2021, Conservation Practices appear ‘Variety’ Column.","code":"# group_by(fsa, Year, `Intended Use`) %>% #   summarise(Acres=sum(Acres, na.rm=TRUE)) %>% #   spread(Year, Acres) %>% write.csv('Intended Use Review.csv')  # filter(fsa, `Intended Use`=='LF') ## sesame leaves?  intended_use_recode <- read_xlsx(   \"../data-raw/FSA - Clean up the names.xlsx\",   sheet = 'intended use recode 1') fsa <- recode_column_with_table(fsa, 4, intended_use_recode)  fsa <- mutate(fsa, `Intended Use`= if_else(   is.na(as.numeric(`Intended Use`)),   `Intended Use`, paste0('CP', `Intended Use`)))  # group_by(fsa, Year, `Intended Use`) %>% #   summarise(Acres=sum(Acres, na.rm=TRUE)) %>% #   spread(Year, Acres) %>% write.csv('Intended Use Review2.csv')  intended_use_recode2 <- read_xlsx(   \"../data-raw/FSA - Clean up the names.xlsx\",   sheet = 'intended use recode 2') fsa <- recode_column_with_table(fsa, 4, intended_use_recode2)  # group_by(fsa, Crop, `Intended Use`) %>% #   summarise(Acres=sum(Acres, na.rm=TRUE)) %>% #   spread(`Intended Use`, Acres) %>% View() ### All of those CP## entries in `Intended Use` have Crop=='CRP' filter(fsa, Crop != 'CRP')$`Intended Use` %>% unique() ### Yea, pretty much.  # filter(fsa, Crop=='CRP' | is.na(Crop))$Type %>% unique()  filter(fsa, Crop=='CRP' | is.na(Crop)) %>%   group_by(Crop, Year, Variety, `Intended Use`) %>%   summarise(Acres=sum(Acres, na.rm=TRUE)) %>%   spread(Year, Acres) %>% View()  fsa_crp <- filter(fsa, Crop=='CRP') %>%   mutate(Variety = if_else(is.na(Variety),                            `Intended Use`, Variety))  group_by(fsa_crp, Crop, Year, Variety, `Intended Use`) %>%   summarise(Acres=sum(Acres, na.rm=TRUE)) %>%   spread(Year, Acres) %>% write.csv('CRP Variety Review.csv')  CRP_variety_recode <- read_xlsx(   \"FSA - Clean up the names.xlsx\",   sheet = 'CRP variety recode')  fsa_crp <- recode_column_with_table(fsa_crp, 3, CRP_variety_recode)  #### Some acronyms in the CRP varieties: ### FWP Farmable Wetland Program ### MPL Marginal Pasture Land ### EFCRP   Emergency Forest Conservation Reserve Program ### SAFE    State Acres for … ### WL  Wildlife  fsa_crp <- mutate(fsa_crp, `Intended Use` = NA_character_) select(fsa_crp, Variety, `Intended Use`) %>% unique() %>% View()  fsa <- bind_rows(filter(fsa, Crop != 'CRP'), fsa_crp)  rm(fsa_crp, CRP_variety_recode)  rm(intended_use_recode, intended_use_recode2)  acresFSA <- mutate(fsa,                    Year= as.integer(as.numeric(Year)),                    State=as.factor(State),                    County=as.factor(County),                    Type=as.factor(Type),                    `Irrigation Practice`=as.factor(`Irrigation Practice`),                    Crop=as.factor(Crop),                    Variety=Variety,                    `Intended Use`=as.factor(`Intended Use`),                    Acres=Acres) %>%   track_dataset(\"Convert some column types\")  acresFSA <- acresFSA %>%   select(Year, State, County, Type, `Irrigation Practice`, Crop, Variety, `Intended Use`,          Acres)  usethis::use_data(acresFSA, overwrite=TRUE) write.csv(data_manipulation_log, 'data_cleaning_log.csv')"},{"path":[]},{"path":"https://capellett.github.io/acresFSA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"C Pellett. Author, maintainer. State South Carolina Department Natural Resources. Funder.","code":""},{"path":"https://capellett.github.io/acresFSA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pellett C (2024). acresFSA: United States Farm Service Agency Acreage Data. R package version 0.0.0.9000, https://capellett.github.io/acresFSA/, https://github.com/capellett/acresFSA.","code":"@Manual{,   title = {acresFSA: United States Farm Service Agency Acreage Data},   author = {C A Pellett},   year = {2024},   note = {R package version 0.0.0.9000, https://capellett.github.io/acresFSA/},   url = {https://github.com/capellett/acresFSA}, }"},{"path":"https://capellett.github.io/acresFSA/index.html","id":"acresfsa","dir":"","previous_headings":"","what":"United States Farm Service Agency Acreage Data","title":"United States Farm Service Agency Acreage Data","text":"acresFSA R-package contains selection data downloaded United States Department Agriculture (USDA) Farm Service Agency (FSA) website. “Farm Service Agency policy requires producers participating several programs submit annual report regarding cropland use farms. programs include Agriculture Risk Coverage (ARC) Price Loss Coverage (PLC). Reporting also applies receive marketing assistance loans loan deficiency payments. Failure file accurate timely acreage report crops land uses can result loss program benefits. Producers required self report cropland farm FSA annually. FSA uses data determine payment eligibility (land must eligible agricultural use qualify payments) calculate losses various disaster programs. Data reported following categories: planted; prevented planted; failed. addition, National Agricultural Statistics Service uses FSA planted acreage data complement survey data.” https://www.fsa.usda.gov/news-room/efoia/electronic-reading-room/frequently-requested-information/crop-acreage-data/index","code":""},{"path":"https://capellett.github.io/acresFSA/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"United States Farm Service Agency Acreage Data","text":"“Getting Started” article intended accessible general public. includes download link interactive data exploration tool.","code":""},{"path":"https://capellett.github.io/acresFSA/index.html","id":"for-r-users","dir":"","previous_headings":"","what":"For R Users","title":"United States Farm Service Agency Acreage Data","text":"acresFSA R package exports single data object, named acresFSA. package also contains articles (AKA vignettes), plotting functions, custom helper functions. vignettes document methods used compile clean data. can install development version acresFSA GitHub :","code":"# install.packages(\"pak\") pak::pak(\"capellett/acresFSA\")"},{"path":"https://capellett.github.io/acresFSA/reference/acresFSA.html","id":null,"dir":"Reference","previous_headings":"","what":"United States Farm Service Agency Acreage Data — acresFSA","title":"United States Farm Service Agency Acreage Data — acresFSA","text":"package contains annual county level data     United States Farm Service Agency. Acreage data 2009-2023 County, irrigation, factors.","code":""},{"path":"https://capellett.github.io/acresFSA/reference/acresFSA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"United States Farm Service Agency Acreage Data — acresFSA","text":"","code":"acresFSA"},{"path":"https://capellett.github.io/acresFSA/reference/acresFSA.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"United States Farm Service Agency Acreage Data — acresFSA","text":"data frame nine variables: Year Year, 2009-2023 State, County US State county names, caps. Type Cultivation type: Failed, Planted, Planted, Prevented, Volunteer Irrigation Practice Irrigated typical means, type irrigation, total (irrigated non-irrigated) Crop Name crop Variety Name crop variety Intended Use Intended use crop Acres Amount acres details, see https://www.fsa.usda.gov/news-room/efoia/electronic-reading-room/frequently-requested-information/crop-acreage-data/index","code":""},{"path":[]},{"path":"https://capellett.github.io/acresFSA/reference/acresFSA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"United States Farm Service Agency Acreage Data — acresFSA","text":"Maintainer: C Pellett c.alex.pellett@gmail.com contributors: State South Carolina Department Natural Resources [funder]","code":""},{"path":"https://capellett.github.io/acresFSA/reference/flast.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast last — flast","title":"Fast last — flast","text":"Fast last","code":""},{"path":"https://capellett.github.io/acresFSA/reference/flast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast last — flast","text":"","code":"flast(x)"},{"path":"https://capellett.github.io/acresFSA/reference/flast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast last — flast","text":"x R object.","code":""},{"path":"https://capellett.github.io/acresFSA/reference/flast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast last — flast","text":"Returns last element vector, factor, R object     method length function.","code":""},{"path":"https://capellett.github.io/acresFSA/reference/flast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast last — flast","text":"","code":"flast(1:5) ## 5 #> Error in flast(1:5): could not find function \"flast\" flast(letters) ## \"z\" #> Error in flast(letters): could not find function \"flast\""},{"path":"https://capellett.github.io/acresFSA/reference/grapes-nin-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Not in — %nin%","title":"Not in — %nin%","text":"Binary operator returns logical vector indicating     match x y.","code":""},{"path":"https://capellett.github.io/acresFSA/reference/grapes-nin-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Not in — %nin%","text":"","code":"x %nin% y"},{"path":"https://capellett.github.io/acresFSA/reference/grapes-nin-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Not in — %nin%","text":"x, y vectors NULL. LongVectors supported y.","code":""},{"path":"https://capellett.github.io/acresFSA/reference/grapes-nin-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Not in — %nin%","text":"logical vector length x.","code":""},{"path":"https://capellett.github.io/acresFSA/reference/grapes-nin-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Not in — %nin%","text":"","code":"c(1, 2, 3,'a','b','c') %!in% letters #> Error in c(1, 2, 3, \"a\", \"b\", \"c\") %!in% letters: could not find function \"%!in%\" ## TRUE TRUE TRUE FALSE FALSE FALSE"},{"path":"https://capellett.github.io/acresFSA/reference/is.length0.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the length of an R object — is.length0","title":"Test the length of an R object — is.length0","text":"Test length R object","code":""},{"path":"https://capellett.github.io/acresFSA/reference/is.length0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test the length of an R object — is.length0","text":"","code":"is.length0(x = NULL)  is.length1(x = NULL)"},{"path":"https://capellett.github.io/acresFSA/reference/is.length0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the length of an R object — is.length0","text":"x R object.","code":""},{"path":"https://capellett.github.io/acresFSA/reference/is.length0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the length of an R object — is.length0","text":"length 1 logical vector.","code":""},{"path":"https://capellett.github.io/acresFSA/reference/is.length0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test the length of an R object — is.length0","text":"","code":"is.length0() ## TRUE #> Error in is.length0(): could not find function \"is.length0\" is.length0(NULL) ## TRUE #> Error in is.length0(NULL): could not find function \"is.length0\" is.length0(\"\") ## FALSE #> Error in is.length0(\"\"): could not find function \"is.length0\" is.length0(NA) ## FALSE #> Error in is.length0(NA): could not find function \"is.length0\" is.length1(\"\") ## TRUE #> Error in is.length1(\"\"): could not find function \"is.length1\" is.length1(NA) ## TRUE #> Error in is.length1(NA): could not find function \"is.length1\" is.length1(c(NULL, NA)) ## TRUE #> Error in is.length1(c(NULL, NA)): could not find function \"is.length1\" is.length1(NULL) ## FALSE #> Error in is.length1(NULL): could not find function \"is.length1\" is.length1(1:2) ## FALSE #> Error in is.length1(1:2): could not find function \"is.length1\""},{"path":"https://capellett.github.io/acresFSA/reference/not.null.html","id":null,"dir":"Reference","previous_headings":"","what":"Not null — not.null","title":"Not null — not.null","text":"Test whether R object NULL.","code":""},{"path":"https://capellett.github.io/acresFSA/reference/not.null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Not null — not.null","text":"","code":"not.null(x)"},{"path":"https://capellett.github.io/acresFSA/reference/not.null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Not null — not.null","text":"x R object tested.","code":""},{"path":"https://capellett.github.io/acresFSA/reference/not.null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Not null — not.null","text":"TRUE object entirely NULL, otherwise FALSE.","code":""},{"path":"https://capellett.github.io/acresFSA/reference/not.null.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Not null — not.null","text":"","code":"not.null(0) ## TRUE #> Error in not.null(0): could not find function \"not.null\" not.null(NA_character_) ## TRUE #> Error in not.null(NA_character_): could not find function \"not.null\" not.null(NULL) ## FALSE #> Error in not.null(NULL): could not find function \"not.null\" not.null(c(NULL, 0)) ## TRUE #> Error in not.null(c(NULL, 0)): could not find function \"not.null\" not.null(c(a=NULL, b=NULL)) ## FALSE #> Error in not.null(c(a = NULL, b = NULL)): could not find function \"not.null\""},{"path":"https://capellett.github.io/acresFSA/reference/tabular.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table in Roxygen comments — tabular","title":"Create a table in Roxygen comments — tabular","text":"Print output function produce     table documentation produced Roxygen.","code":""},{"path":"https://capellett.github.io/acresFSA/reference/tabular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table in Roxygen comments — tabular","text":"","code":"tabular(df, ...)"},{"path":"https://capellett.github.io/acresFSA/reference/tabular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a table in Roxygen comments — tabular","text":"df data.frame object print documentation.","code":""},{"path":"https://capellett.github.io/acresFSA/reference/tabular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a table in Roxygen comments — tabular","text":"table sorts.","code":""},{"path":"https://capellett.github.io/acresFSA/reference/to_aoi.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to Area of Interest — to_aoi","title":"Convert to Area of Interest — to_aoi","text":"Convert R object Area Interest.","code":""},{"path":"https://capellett.github.io/acresFSA/reference/to_aoi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to Area of Interest — to_aoi","text":"","code":"to_aoi(x)"},{"path":"https://capellett.github.io/acresFSA/reference/to_aoi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to Area of Interest — to_aoi","text":"x R object. Currently atomic character vectors accepted.","code":""},{"path":"https://capellett.github.io/acresFSA/reference/to_aoi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to Area of Interest — to_aoi","text":"R object class aoi","code":""},{"path":"https://capellett.github.io/acresFSA/reference/to_aoi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to Area of Interest — to_aoi","text":"","code":"to_aoi('South Carolina') #> Error in to_aoi(\"South Carolina\"): could not find function \"to_aoi\" to_aoi('North Carolina') #> Error in to_aoi(\"North Carolina\"): could not find function \"to_aoi\""},{"path":"https://capellett.github.io/acresFSA/reference/track_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Track a dataset — track_dataset","title":"Track a dataset — track_dataset","text":"use keep track changes dataset multiple operations.","code":""},{"path":"https://capellett.github.io/acresFSA/reference/track_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Track a dataset — track_dataset","text":"","code":"track_dataset(   df,   step_name = NA_character_,   track_log = \"data_manipulation_log\",   step_inc = 1 )"},{"path":"https://capellett.github.io/acresFSA/reference/track_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Track a dataset — track_dataset","text":"df data frame track step_name like call operation tracking? track_log like name object logs information step_inc many steps tracking (default 1).","code":""},{"path":"https://capellett.github.io/acresFSA/reference/track_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Track a dataset — track_dataset","text":"TRUE object entirely NULL, otherwise FALSE.","code":""}]
